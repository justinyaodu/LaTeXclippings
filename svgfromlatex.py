"""
Dependencies: pdflatex, inkscape
"""

import itertools
import re
from pathlib import Path
import shlex
import subprocess
import tempfile

__all__ = ['LatexSVG', 'render']

class LatexSVG:
    """Represents an SVG rendered from LaTeX source."""

    def __init__(self, latex, svg, width, height, depth):
        # LaTeX source.
        self.latex = latex

        # SVG source.
        self.svg = svg

        # Width of the SVG, in ex.
        self.width = width

        # Height of the SVG, in ex.
        self.height = height

        # Height of the portion of the SVG below the baseline, in ex.
        self.depth = depth

    def __str__(self):
        return self.svg


def render(sources, preamble=r'\documentclass{minimal}'):
    """Given an array of LaTeX source code strings, render each LaTeX
    string on a separate page, and return an array of corresponding
    LatexSVG instances.
    """
    
    latex_pages = _get_pages(sources)
    latex = _assemble_latex(latex_pages, preamble)

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_dir = Path(temp_dir)
        pdf = _pdflatex(latex, temp_dir)
        svg_pages = [_inkscape(pdf, i) for i in range(len(latex_pages))]

    one_ex = svg_pages[0].height

    latex_svgs = []
    for i in range(len(sources)):
        svg_page_full = svg_pages[2 * i + 1]
        svg_page_below_baseline = svg_pages[2 * i + 2]
        latex_svgs.append(LatexSVG(
            sources[i],
            svg_page_full.svg,
            svg_page_full.width / one_ex,
            svg_page_full.height / one_ex,
            svg_page_below_baseline.height / one_ex))

    return latex_svgs


def _get_pages(sources):
    """Given an array of LaTeX source strings, return a transformed
    array of source strings where each element corresponds to a page
    in the rendered document. Page 0 containts a letter 'x', page 2n+1
    contains sources[n], and page 2n+2 contains the portion of
    sources[n] below the baseline.
    """

    pages = ['x']

    for source in sources:
        # Render normally.
        pages.append(source)

        # Render only the part below the baseline.
        pages.append('\n'.join([
                r'\begin{clipbox}{0 0 0 {\height}}',
                source,
                r'\end{clipbox}']))

    return pages

    
def _assemble_latex(pages, preamble):
    """Return a string representing a LaTeX source file, where page 0
    contains a letter 'x', page 2n+1 contains sources[n], and page 2n+2
    contains the portion of sources[n] below the baseline.
    """

    # Ensure that the trimclip package is available.
    if not re.match(r'\\usepackage(\[[^\]]*\])?\{trimclip\}', preamble):
        preamble += '\n' + r'\usepackage{trimclip}'

    return '\n'.join([
            preamble,
            r'\begin{document}',
            *[r'\newpage' + '\n' + page for page in pages],
            r'\end{document}'])


def _pdflatex(latex, working_dir):
    """Render LaTeX source to a PDF in the working directory, returning
    the path of the rendered PDF.
    """

    completed_process = subprocess.run(["pdflatex"],
            cwd=working_dir,
            input=latex.encode(),
            capture_output=True)

    try:
        completed_process.check_returncode()
    except subprocess.CalledProcessError as e:
        raise ValueError(completed_process.stdout.decode('utf-8')) from e

    return working_dir / "texput.pdf"


class _InkscapeSVG:
    "Represents a cropped SVG generated by Inkscape."

    def __init__(self, width, height, svg):
        # Width, in px.
        self.width = width

        # Height, in px.
        self.height = height

        # SVG source.
        self.svg = svg


def _inkscape(pdf, page):
    """Convert a (zero-indexed) page of the specified PDF to a cropped
    SVG. Returns a dict {width, height, svg}.
    """

    output = subprocess.run(
            [
                "inkscape",
                "--pdf-poppler",
                f"--pdf-page={page + 1}",
                "--query-width",
                "--query-height",
                "--export-plain-svg",
                "--export-area-drawing",
                "--export-filename=-",
                shlex.quote(str(pdf))
            ],
            capture_output=True,
            check=True).stdout

    lines = output.decode('utf-8').split('\n')
    return _InkscapeSVG(float(lines[0]), float(lines[1]), '\n'.join(lines[2:]))


def _pdfseparate(pdf):
    """Separate a PDF file into its pages, returning a list of paths
    corresponding to the individual pages in ascending numerical order.
    """

    # Turn "texput.pdf" into "texput-N.pdf".
    split = pdf.name.split('.')
    prefix = '.'.join(split[:-1]) + '-'
    suffix = '.' + split[-1]
    page_filename_template = pdf.parent / (prefix + '%d' + suffix)

    subprocess.run(["pdfseparate", pdf, pdf.parent / page_filename_template],
            capture_output=True,
            check=True)

    page_paths = []
    for num in itertools.count(1):
        page_path = pdf.parent / (prefix + str(num) + suffix)
        if page_path.exists():
            page_paths.append(page_path)
        else:
            return page_paths
